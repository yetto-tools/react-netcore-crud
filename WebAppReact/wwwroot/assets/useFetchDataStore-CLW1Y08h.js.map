{"version":3,"file":"useFetchDataStore-CLW1Y08h.js","sources":["../../front-react/src/stores/API/Endpoints.jsx","../../front-react/src/stores/useFetchDataStore.jsx"],"sourcesContent":["export const url = \"http://localhost:5193/\";\r\nexport const url_api = \"http://localhost:5193/api\";\r\n\r\nexport const API = {\r\n  category: {\r\n    url: `${url_api}/Category`,\r\n    method: \"GET\",\r\n    categories: {\r\n      url: `${url_api}/Category/categories`,\r\n      method: \"GET\",\r\n    },\r\n    search: {\r\n      url: `${url_api}/Category/search`,\r\n      method: \"GET\",\r\n    },\r\n    save: {\r\n      url: `${url_api}/Category/save`,\r\n      method: \"PUT\",\r\n    },\r\n  },\r\n\r\n  product: {\r\n    url: `${url_api}/Product`,\r\n    method: \"GET\",\r\n    products: {\r\n      url: `${url_api}/Product/products`,\r\n      method: \"GET\",\r\n    },\r\n    search: {\r\n      url: `${url_api}/Product/search`,\r\n      method: \"POST\",\r\n    },\r\n    save: {\r\n      url: `${url_api}/Product/save`,\r\n      method: \"PUT\",\r\n    },\r\n  },\r\n\r\n  invoice: {\r\n    url: `${url_api}/Invoice`,\r\n    method: \"GET\",\r\n    invoices: {\r\n      url: `${url_api}/Invoice/invoices`,\r\n      method: \"POST\",\r\n    },\r\n    search: {\r\n      url: `${url_api}/Invoice/search`,\r\n      method: \"POST\",\r\n    },\r\n    save: {\r\n      url: `${url_api}/Invoice/save`,\r\n      method: \"PUT\",\r\n    },\r\n  },\r\n\r\n  customer: {\r\n    url: `${url_api}/Customer`,\r\n    method: \"GET\",\r\n    customers: {\r\n      url: `${url_api}/Customer/customers`,\r\n      method: \"POST\",\r\n    },\r\n    search: {\r\n      url: `${url_api}/Customer/search`,\r\n      method: \"POST\",\r\n    },\r\n    save: {\r\n      url: `${url_api}/Customer/save`,\r\n      method: \"PUT\",\r\n    },\r\n  },\r\n\r\n  user: {\r\n    url: `${url_api}/User`,\r\n    method: \"GET\",\r\n    users: {\r\n      url: `${url_api}/User/users`,\r\n      method: \"POST\",\r\n    },\r\n    search: {\r\n      url: `${url_api}/User/search`,\r\n      method: \"POST\",\r\n    },\r\n    save: {\r\n      url: `${url_api}/User/save`,\r\n      method: \"PUT\",\r\n    },\r\n  },\r\n\r\n  sale: {\r\n    url: `${url_api}/Sale`,\r\n    method: \"GET\",\r\n    sales: {\r\n      url: `${url_api}/Sale/sales`,\r\n      method: \"POST\",\r\n    },\r\n    search: {\r\n      url: `${url_api}/Sale/search`,\r\n      method: \"POST\",\r\n    },\r\n    save: {\r\n      url: `${url_api}/Sale/save`,\r\n      method: \"PUT\",\r\n    },\r\n  },\r\n\r\n  register: {\r\n    url: `${url_api}/User/save`,\r\n    method: \"PUT\",\r\n  },\r\n  login: {\r\n    url: `${url_api}/Auth/login`,\r\n    method: \"POST\",\r\n  },\r\n};\r\n","import useLoading from \"./useLoading\";\r\n\r\n// Función para realizar fetch\r\nconst fetchData = async (\r\n  setStore = () => {},\r\n  url = null,\r\n  method = \"GET\",\r\n  body = null,\r\n  contentType = \"application/json\",\r\n  token = null,\r\n  setIsLoading\r\n) => {\r\n  const options = {\r\n    method,\r\n    headers: {\r\n      \"Content-Type\": contentType,\r\n    },\r\n    body: body ? JSON.stringify(body) : null,\r\n  };\r\n\r\n  if (body instanceof FormData) {\r\n    options.body = body;\r\n  } else {\r\n    options.headers[\"Content-Type\"] = contentType;\r\n    options.body = body ? JSON.stringify(body) : null;\r\n  }\r\n  // Añadir el token al encabezado si está presente\r\n  if (token) {\r\n    options.headers[\"Authorization\"] = `Bearer ${token}`;\r\n  }\r\n\r\n  let struct = {\r\n    data: {},\r\n    loading: true,\r\n    error: null,\r\n    message: null,\r\n  };\r\n\r\n  try {\r\n    setIsLoading(true);\r\n    const response = await fetch(url, options);\r\n    const resContentType = response.headers.get(\"Content-Type\");\r\n\r\n    if (response.status == \"500\") {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    if (response.status == \"401\") {\r\n      struct.message == \"Unauthenticated\";\r\n    }\r\n    if (response.status == \"405\") {\r\n      struct.message == \"Method Not Allowed\";\r\n    }\r\n\r\n    if (resContentType.includes(\"application/json\")) {\r\n      struct.data = await response.json(); // Procesa como JSON\r\n    } else if (resContentType.includes(\"text/plain\")) {\r\n      struct.data = await response.text(); // Procesa como texto plano\r\n    } else {\r\n      struct.data = await response.blob();\r\n    }\r\n  } catch (error) {\r\n    struct.error = error.message;\r\n    setIsLoading(false);\r\n  } finally {\r\n    struct.loading = false;\r\n    setIsLoading(false);\r\n    setStore(struct); // Esto supone que setStore puede manejar este objeto\r\n  }\r\n};\r\n\r\nconst APIFetchData = async (props) => {\r\n  // Desestructura props aquí si estás pasando un objeto, o directamente en los parámetros de la función\r\n  const { setStore, url, method, body, contentType, token, setIsLoading } =\r\n    props;\r\n\r\n  const { data, loading, error, message } = fetchData(\r\n    setStore,\r\n    url,\r\n    method,\r\n    body,\r\n    contentType,\r\n    token,\r\n    setIsLoading\r\n  );\r\n\r\n  return { data, loading, error, message };\r\n};\r\n\r\nexport default APIFetchData;\r\n"],"names":["url_api","API","fetchData","setStore","url","method","body","contentType","token","setIsLoading","options","struct","response","resContentType","error","APIFetchData","props","data","loading","message"],"mappings":"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"}