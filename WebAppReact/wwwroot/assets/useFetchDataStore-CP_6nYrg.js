const e="http://localhost:5193/api",T={category:{url:`${e}/Category`,method:"GET",categories:{url:`${e}/Category/categories`,method:"GET"},search:{url:`${e}/Category/search`,method:"POST"},save:{url:`${e}/Category/save`,method:"PUT"}},product:{url:`${e}/Product`,method:"GET",products:{url:`${e}/Product/products`,method:"GET"},search:{url:`${e}/Product/search`,method:"POST"},save:{url:`${e}/Product/save`,method:"PUT"}},invoice:{url:`${e}/Invoice`,method:"GET",invoices:{url:`${e}/Invoice/invoices`,method:"GET"},search:{url:`${e}/Invoice/search`,method:"POST"},save:{url:`${e}/Invoice/save`,method:"PUT"}},customer:{url:`${e}/Customer`,method:"GET",customers:{url:`${e}/Customer/customers`,method:"GET"},search:{url:`${e}/Customer/search`,method:"POST"},save:{url:`${e}/Customer/save`,method:"PUT"}},user:{url:`${e}/User`,method:"GET",users:{url:`${e}/User/users`,method:"GET"},search:{url:`${e}/User/search`,method:"POST"},save:{url:`${e}/User/save`,method:"PUT"}},sale:{url:`${e}/Sale`,method:"GET",sales:{url:`${e}/Sale/sales`,method:"POST"},search:{url:`${e}/Sale/search`,method:"POST"},save:{url:`${e}/Sale/save`,method:"PUT"}},register:{url:`${e}/User/save`,method:"PUT"},login:{url:`${e}/Auth/login`,method:"POST"}},h={},m=async(c=()=>{},r=null,i="GET",a=null,l="application/json",u=null,n)=>{if(h[r])return console.warn(`La solicitud a la URL ${r} ya estÃ¡ en curso.`),{data:{},loading:!1,error:"Solicitud en curso",message:null};h[r]=!0;const o={method:i,headers:{"Content-Type":l},body:a?JSON.stringify(a):null};a instanceof FormData?o.body=a:(o.headers["Content-Type"]=l,o.body=a?JSON.stringify(a):null),u&&(o.headers.Authorization=`Bearer ${u}`);let s={data:{},loading:!0,error:null,message:null};try{n(!0);const t=await fetch(r,o),d=t.headers.get("Content-Type");if(t.status===500)throw new Error(`HTTP error! status: ${t.status}`);return t.status===401&&(s.message="Unauthenticated"),t.status===405&&(s.message="Method Not Allowed"),d.includes("application/json")?s.data=await t.json():d.includes("text/plain")?s.data=await t.text():d.includes("text/html")?s.data=await t.text():s.data=await t.blob(),s}catch(t){s.error=t.message}finally{s.loading=!1,n(!1),c(s),delete h[r]}},$=async c=>{const{setStore:r,url:i,method:a,body:l,contentType:u,token:n,setIsLoading:o}=c;return await m(r,i,a,l,u,n,o)};export{$ as A,T as a};
//# sourceMappingURL=useFetchDataStore-CP_6nYrg.js.map
